name: JIRENGU_CI

on:
  pull_request:
    branches:
      - main
jobs:
  homework-judgement:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Comment on PR
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            <!--- 你要打开的这个Pull request(PR)的类型是？默认是题目解答，如果你正在修复当前的仓库的缺陷，请选择对应的类型 -->
            感谢您的Pull Request！
            - [x] 这个PR解答了当前仓库中的题目（会自动判题并合并当前PR）
            - [ ] 这个PR修复了当前仓库中的一些代码缺陷（不会判题，由管理员来处理当前PR）
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test with Maven
        run: mvn -B clean verify --file pom.xml

      - name: Comment PR with test result
        if: ${{ always() }}
        uses: actions/github-script@v5
        
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { owner, repo, number } = context.issue;
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number });
              const commentBody = Buffer.from(`Test result: **${process.env.TEST_RESULT}**`, 'utf8').toString('base64');
              const existingComment = comments.find(c => c.body.startsWith("Test result:"));
              if (existingComment) {
                await github.rest.issues.updateComment({ owner, repo, comment_id: existingComment.id, body: commentBody });
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number: number, body: commentBody });
              }
            } catch (error) {
              console.error(error);
              core.setFailed(error.message);
            }

      - name: Set TEST_RESULT environment variable
        run: echo "TEST_RESULT=Success" >> $GITHUB_ENV
        if: ${{ success() }}

      - name: Set TEST_RESULT environment variable
        run: echo "TEST_RESULT=Failed" >> $GITHUB_ENV
        if: ${{ failure() }}

      - name: Revert PR branch
        if: ${{ always() }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout ${{ github.head_ref }}
          git revert --no-commit HEAD
          git commit -m "Revert test commit"
          git push
